name: Build and Release Wails App

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  package:
    strategy:
      matrix:
        go-version: [1.21]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Install Linux Wails dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Get Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      ##################################
      # macOS build
      ##################################
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          wails build -p
          npm install -g appdmg
          appdmg dmg-spec.json optimus.dmg
          zip optimus.zip optimus.dmg

      ##################################
      # Linux build
      ##################################
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          wails build
          tar -czvf optimus.tar.gz ./build/optimus

      ##################################
      # Windows build
      ##################################
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:Path += ";$env:GOPATH\bin"
          New-Item -ItemType Directory -Force -Path "$HOME\.wails"
          Copy-Item -Path ".\wails.json" -Destination "$HOME\.wails\wails.json"
          choco install mingw
          wails build -p
          Compress-Archive -Path .\build\optimus* -DestinationPath .\optimus.zip

      ##################################
      # Upload Artifacts
      ##################################
      - name: Upload macOS Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: optimus-macOS
          path: optimus.zip

      - name: Upload Linux Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: optimus-linux
          path: optimus.tar.gz

      - name: Upload Windows Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: optimus-windows
          path: optimus.zip

  ##################################
  # Release step
  ##################################
  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true
          prerelease: true

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: optimus-macOS
          path: ./mac

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac/optimus.zip
          asset_name: optimus_${{ github.ref_name }}_macOS.zip
          asset_content_type: application/zip

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: optimus-linux
          path: ./linux

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/optimus.tar.gz
          asset_name: optimus_${{ github.ref_name }}_linux_x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: optimus-windows
          path: ./windows

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/optimus.zip
          asset_name: optimus_${{ github.ref_name }}_windows_x86_64.zip
          asset_content_type: application/zip
